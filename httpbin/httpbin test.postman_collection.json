{
	"info": {
		"_postman_id": "4ddec311-1ab4-47c8-b76c-e8beab274958",
		"name": "httpbin test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://0.0.0.0/get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.origin).to.be.a(\"string\");",
							"  pm.expect(jsonData.headers).to.be.an(\"object\");",
							"  pm.expect(jsonData.headers.Accept).to.be.an(\"string\");",
							"  pm.expect(jsonData.data).to.be.undefined;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0/get",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://0.0.0.0/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.origin).to.be.a(\"string\");",
							"  pm.expect(jsonData.headers).to.be.an(\"object\");",
							"  pm.expect(jsonData.headers.Accept).to.be.an(\"string\");",
							"  pm.expect(jsonData.data).to.be.a(\"string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0/delete",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"path": [
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://0.0.0.0/post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.origin).to.be.a(\"string\");",
							"  pm.expect(jsonData.headers).to.be.an(\"object\");",
							"  pm.expect(jsonData.headers.Accept).to.be.an(\"string\");",
							"  pm.expect(jsonData.data).to.be.a(\"string\");",
							"  pm.expect(jsonData.json).to.be.a(\"object\"); ",
							"});",
							"",
							"pm.test(\"Test data value\", () => {",
							"  pm.expect(jsonData.json.message).to.be.equal(\"hello\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"hello\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0/post",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://0.0.0.0/put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.origin).to.be.a(\"string\");",
							"  pm.expect(jsonData.headers).to.be.an(\"object\");",
							"  pm.expect(jsonData.headers.Accept).to.be.an(\"string\");",
							"  pm.expect(jsonData.data).to.be.a(\"string\");",
							"  pm.expect(jsonData.json).to.be.a(\"object\"); ",
							"});",
							"",
							"pm.test(\"Test data value\", () => {",
							"  pm.expect(jsonData.json.message).to.be.equal(\"hello\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"hello\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0/put",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"path": [
						"put"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"  pm.response.to.have.status(200);",
					"});",
					"pm.test(\"response must be valid and have a body\", function () {",
					"     pm.response.to.be.ok;",
					"     pm.response.to.be.withBody;",
					"     pm.response.to.be.json;",
					"});"
				]
			}
		}
	]
}